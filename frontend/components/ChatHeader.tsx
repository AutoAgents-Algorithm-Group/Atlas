'use client';

import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Computer, Share, MoreHorizontal, Download, FileText, Loader2 } from 'lucide-react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';

interface SandboxFile {
  name: string;
  path: string;
  size: number;
  type: string;
}

interface ChatHeaderProps {
  isActive: boolean;
  sandboxFiles: SandboxFile[];
  isFilesDialogOpen: boolean;
  setIsFilesDialogOpen: (open: boolean) => void;
  isLoadingFiles: boolean;
  fetchSandboxFiles: () => void;
  downloadFile: (file: SandboxFile) => void;
}

export default function ChatHeader({
  isActive,
  sandboxFiles,
  isFilesDialogOpen,
  setIsFilesDialogOpen,
  isLoadingFiles,
  fetchSandboxFiles,
  downloadFile
}: ChatHeaderProps) {
  return (
    <div className="h-16 px-6 flex items-center justify-between bg-[#faf9f6]">
      {/* 左侧 Logo */}
      <div className="flex items-center gap-3">
        <h1 className="text-lg font-semibold text-gray-900">Atlas</h1>
      </div>
      
      {/* 中部 Session Title */}
      <div className="flex-1 text-center">
        <h2 className="text-sm font-medium text-gray-700">
          {isActive ? 'Active Session' : 'No Active Session'}
        </h2>
      </div>
      
      {/* 右侧按钮 */}
      <div className="flex items-center gap-2">
        {/* Files Dialog */}
        <Dialog open={isFilesDialogOpen} onOpenChange={setIsFilesDialogOpen}>
          <DialogTrigger asChild>
            <Button variant="outline" size="sm">
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                width="16" 
                height="16" 
                viewBox="0 0 24 24" 
                fill="none" 
                stroke="currentColor" 
                strokeWidth="2" 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                className="lucide lucide-file-search"
              >
                <path d="M14 2v4a2 2 0 0 0 2 2h4"></path>
                <path d="M4.268 21a2 2 0 0 0 1.727 1H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3"></path>
                <path d="m9 18-1.5-1.5"></path>
                <circle cx="5" cy="14" r="3"></circle>
              </svg>
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl max-h-[80vh]">
            <DialogHeader>
              <DialogTitle>Sandbox Files</DialogTitle>
              <DialogDescription>
                Files created by AI in the sandbox
              </DialogDescription>
            </DialogHeader>
            
            <div className="flex items-center justify-between mb-4">
              <p className="text-sm text-gray-600">
                {sandboxFiles.length} files found
              </p>
              <Button
                onClick={fetchSandboxFiles}
                disabled={isLoadingFiles || !isActive}
                variant="outline"
                size="sm"
              >
                {isLoadingFiles ? (
                  <Loader2 className="h-3 w-3 animate-spin" />
                ) : (
                  'Refresh'
                )}
              </Button>
            </div>
            
            <ScrollArea className="max-h-96">
              {!isActive ? (
                <div className="text-center text-gray-500 py-8">
                  <FileText className="h-16 w-16 mx-auto mb-4 text-gray-300" />
                  <h3 className="text-lg font-medium mb-2">Start a session</h3>
                  <p className="text-sm">
                    Files generated by AI will appear here
                  </p>
                </div>
              ) : sandboxFiles.length === 0 ? (
                <div className="text-center text-gray-500 py-8">
                  <FileText className="h-16 w-16 mx-auto mb-4 text-gray-300" />
                  <h3 className="text-lg font-medium mb-2">No files generated yet</h3>
                </div>
              ) : (
                <div className="space-y-3">
                  {sandboxFiles.map((file, index) => (
                    <Card key={index} className="p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex-1 min-w-0">
                          <h4 className="text-sm font-medium text-gray-900 truncate">
                            {file.name}
                          </h4>
                          <p className="text-xs text-gray-500">
                            {file.size > 0 ? `${Math.round(file.size / 1024)}KB` : 'Unknown size'}
                          </p>
                        </div>
                        <Button
                          onClick={() => downloadFile(file)}
                          variant="outline"
                          size="sm"
                          className="ml-3"
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                      </div>
                    </Card>
                  ))}
                </div>
              )}
            </ScrollArea>
          </DialogContent>
        </Dialog>
        
        {/* Share Button */}
        <Button variant="outline" className='cursor-pointer' size="sm">
          <Share className="h-4 w-4" />
        </Button>
        
        {/* More Menu */}
        <Button variant="outline" className='cursor-pointer' size="sm">
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
}
