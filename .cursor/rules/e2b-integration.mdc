---
globs: backend/Agent/**/*.py,backend/Desktop/**/*.py,backend/Engine/**/*.py
---

# E2B Integration Guidelines

Atlas integrates with **E2B Cloud Desktop** for browser automation in isolated cloud environments. The system uses a unified agent architecture to manage desktop sessions and browser automation.

## üèóÔ∏è Core Architecture

### Unified Agent System
**Main Agent**: [backend/Agent/unified_agent.py](mdc:backend/Agent/unified_agent.py) - **E2BUnifiedAgent**
- Integrates desktop management and browser automation
- Provides unified API interface for FastAPI routers
- Manages session lifecycle and resource cleanup
- Handles file tracking and temporary file management

### Desktop Management
**Desktop Manager**: [backend/Desktop/manager.py](mdc:backend/Desktop/manager.py) - **E2BDesktopManager**
- E2B desktop session creation and management
- Chrome browser launching with CDP (Chrome DevTools Protocol)
- VNC streaming for desktop preview
- CDP proxy setup for external access

### Browser Engine
**Browser Runner**: [backend/Engine/browser_runner.py](mdc:backend/Engine/browser_runner.py) - **BrowseUseRunner**
- Browser Use AI integration for natural language automation
- Playwright/Selenium browser control
- Task execution and result processing

## üîß Key Integration Patterns

### 1. Agent Initialization
```python
from Agent.unified_agent import E2BUnifiedAgent

# Create unified agent with desktop resolution
unified_agent = E2BUnifiedAgent(resolution=(1440, 900), dpi=96)

# Initialize desktop session
stream_url = unified_agent.create_desktop_session()
```

### 2. Session Lifecycle Management
```python
# Create session
session_info = unified_agent.create_desktop_session()

# Check session status
status = unified_agent.get_desktop_status()

# Pause session (preserve state)
unified_agent.pause_desktop_session()

# Resume paused session
unified_agent.resume_desktop_session()

# Destroy session (cleanup resources)
unified_agent.destroy_desktop_session()
```

### 3. Browser Automation
```python
# Execute natural language browser tasks
result = await unified_agent.chat(
    message="Please search for 'artificial intelligence' on Google",
    max_steps=10
)

# Manual control handover
unified_agent.takeover_control()  # User takes control
unified_agent.release_control()   # AI resumes control
```

### 4. File Management
```python
# Get tracked files (auto-tracked by browser automation)
files = unified_agent.get_tracked_files()

# Manually add files to tracking
unified_agent.add_tracked_file("/path/to/file")

# Download files from E2B sandbox
file_data = unified_agent.download_file(file_path)
```

## üåê E2B Desktop Integration

### Desktop Session Features
- **Cloud Environment**: Isolated Linux desktop in E2B cloud
- **Browser Access**: Pre-installed Chrome with CDP access
- **VNC Streaming**: Real-time desktop preview via WebSocket
- **File System**: Persistent file storage during session
- **Network**: External access via E2B port mapping

### CDP (Chrome DevTools Protocol) Setup
```python
# Launch Chrome with CDP enabled
self.desktop_manager.launch_chrome_with_cdp()

# Start CDP proxy for external access
self.desktop_manager.launch_cdp_proxy()

# Get external CDP endpoint
cdp_url = self.desktop_manager.get_external_cdp_url()
```

### VNC Desktop Preview
```python
# Start desktop streaming
stream_url = self.desktop_manager.start_desktop()

# Stream URL format: wss://e2b-domain/desktop-stream
# Frontend connects via WebSocket for real-time preview
```

## ü§ñ Browser Use AI Integration

### Natural Language Automation
```python
# Process user commands through Browser Use AI
async def chat(self, message: str, max_steps: int = 10):
    # Initialize browser automation
    browser_runner = BrowseUseRunner(
        cdp_url=self.external_cdp_base,
        provider=self.ai_provider
    )
    
    # Execute task with natural language
    result = await browser_runner.run_task(message, max_steps)
    
    # Track generated files automatically
    self._track_generated_files(result)
    
    return result
```

### Task Execution Patterns
- **Web Search**: "Search for [query] on Google"
- **Navigation**: "Go to [website] and click [element]"
- **Form Filling**: "Fill out the contact form with [data]"
- **File Download**: "Download the PDF from this page"
- **Screenshot**: "Take a screenshot of the current page"

## üîí Resource Management

### Session Cleanup
```python
def destroy_session(self):
    """Clean up all resources"""
    # Stop browser automation
    if self.browser_runner:
        self.browser_runner.cleanup()
    
    # Stop desktop session
    self.desktop_manager.stop_desktop()
    
    # Clean up temporary files
    self._cleanup_temp_files()
```

### Error Handling
- **Connection Failures**: Automatic retry mechanisms
- **Browser Crashes**: Session recovery and restart
- **E2B Timeouts**: Graceful degradation and user notification
- **Resource Limits**: Proper cleanup and resource monitoring

## üöÄ Development Best Practices

### 1. Agent State Management
- Use a single unified agent instance across the application
- Check initialization status before calling agent methods
- Implement proper error handling for all E2B operations

### 2. Session Persistence
- Support session pause/resume for long-running tasks
- Implement proper cleanup on application shutdown
- Handle E2B service interruptions gracefully

### 3. File Tracking
- Automatically track files generated by browser automation
- Provide manual file addition for custom workflows
- Implement proper file cleanup on session destruction

### 4. Performance Optimization
- Reuse browser instances when possible
- Implement connection pooling for multiple sessions
- Monitor resource usage and implement limits