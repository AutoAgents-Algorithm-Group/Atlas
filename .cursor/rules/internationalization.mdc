---
globs: frontend/messages/*.json,frontend/i18n.ts,frontend/middleware.ts,frontend/app/[locale]/**/*.tsx
---

# Internationalization (i18n) Guidelines

Atlas supports **English** and **Chinese** using **next-intl** with automatic locale detection and routing.

## üåç Configuration Files

### Core Setup
- **i18n Config**: [frontend/i18n.ts](mdc:frontend/i18n.ts) - Defines supported locales and default
- **Middleware**: [frontend/middleware.ts](mdc:frontend/middleware.ts) - Handles locale detection and routing
- **Localized Routes**: [frontend/app/[locale]/](mdc:frontend/app/[locale]/) - Pages with locale-specific routing

### Supported Locales
- **English**: `en` (default)
- **Chinese**: `zh` (Simplified Chinese)

## üìù Message Files

### Structure
All translations are stored in JSON files with nested structure:

**English Messages**: [frontend/messages/en.json](mdc:frontend/messages/en.json)
**Chinese Messages**: [frontend/messages/zh.json](mdc:frontend/messages/zh.json)

### Message Organization Pattern
```json
{
  "common": {
    "loading": "Loading...",
    "error": "An error occurred",
    "success": "Success"
  },
  "chat": {
    "title": "Chat with AI",
    "input": {
      "placeholder": "Type your message...",
      "send": "Send"
    },
    "status": {
      "connected": "Connected",
      "disconnected": "Disconnected"
    }
  },
  "desktop": {
    "title": "Desktop Preview",
    "controls": {
      "takeover": "Take Over",
      "release": "Release"
    }
  }
}
```

## üîß Usage Patterns

### 1. Component Translation
```tsx
import { useTranslations } from 'next-intl';

export default function ChatComponent() {
  const t = useTranslations('chat');
  
  return (
    <div>
      <h1>{t('title')}</h1>
      <input placeholder={t('input.placeholder')} />
      <button>{t('input.send')}</button>
    </div>
  );
}
```

### 2. Multiple Translation Namespaces
```tsx
import { useTranslations } from 'next-intl';

export default function Component() {
  const tCommon = useTranslations('common');
  const tChat = useTranslations('chat');
  
  return (
    <div>
      <h1>{tChat('title')}</h1>
      <p>{tCommon('loading')}</p>
    </div>
  );
}
```

### 3. Translation with Variables
```json
{
  "user": {
    "welcome": "Welcome, {name}!",
    "count": "You have {count, plural, =0 {no messages} =1 {one message} other {# messages}}"
  }
}
```

```tsx
const t = useTranslations('user');
<p>{t('welcome', { name: 'John' })}</p>
<p>{t('count', { count: 5 })}</p>
```

## üöÄ Development Workflow

### 1. Adding New Translations
When adding new UI text:
1. **Never hardcode strings** - always use translation keys
2. **Add to both** [en.json](mdc:frontend/messages/en.json) and [zh.json](mdc:frontend/messages/zh.json)
3. **Use descriptive keys**: `component.section.element` format
4. **Group related translations** under common namespaces

### 2. Key Naming Conventions
```json
{
  "componentName": {
    "section": {
      "element": "Translation text",
      "action": "Action text"
    }
  }
}
```

Examples:
- `chat.input.placeholder`
- `desktop.controls.takeover`
- `files.download.success`
- `session.status.active`

### 3. Language Switcher
Atlas includes a [frontend/components/LanguageSwitcher.tsx](mdc:frontend/components/LanguageSwitcher.tsx) component for locale switching.

## ‚úÖ Best Practices

### 1. Consistent Structure
- Keep the same structure across all language files
- Use nested objects for logical grouping
- Maintain alphabetical order within sections

### 2. Translation Quality
- **English**: Use clear, concise language
- **Chinese**: Use Simplified Chinese characters
- **Context**: Provide meaningful translations that fit the UI context
- **Consistency**: Use the same terms throughout the application

### 3. Missing Translations
- Always provide fallbacks
- Use English as the default for missing keys
- Add placeholder text during development: `"key": "TODO: Translate"`

### 4. File Maintenance
- Keep files synchronized - every key in English should exist in Chinese
- Remove unused translation keys
- Use consistent formatting and indentation
- Test both languages regularly during development